/*  Copyright 2018 ChemAxon Ltd.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'java-library'
}

def version = project.hasProperty('release') ? project.getProperty('release') : '+'

dependencies {
    implementation "com.chemaxon:jchem-main:${version}"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.mockito:mockito-core:5.20.0'
}

repositories {
    maven {
        credentials {
            //set this in gradle.properties
            username = chemaxonUser
            //set this in gradle.properties
            password = chemaxonPassword
        }
        url = chemaxonRepository
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


test {
    environment 'CHEMAXON_HOME', file('cxn_home').getAbsolutePath()
    maxHeapSize = "2g"
}

def mains = [
        'search.DuplicateSearchExample',
        'search.MemorySearchExample',
        'search.StandardizedMolSearchExample',
        'search.db.AsyncSearchExample',
        'search.db.CalculatedColumnsSearchExample',
        'search.db.ChemicalTermsFilteringExample',
        'search.db.DatabaseImportExample',
        'search.db.DiverseSelectionExample',
        'search.db.MultipleQueriesExample',
        'search.db.ReactionSimilaritySearchExample',
        'search.db.RetrievingDatabaseFieldsExample',
        'search.db.SearchTypesExample',
        'search.db.SearchWithFilterQueryExample',
        'search.db.SimilaritySearchExample',
        'search.db.SortedSearchExample',
        'search.hitdisplay.HitColoringExample',
        'search.hitdisplay.PartialCleanExample',
        'search.hitdisplay.RotateDatabaseHitsExample',
        'search.hitdisplay.RotateExample'
]

mains.each { className ->
    tasks.register(getTaskNameFromClass(className), JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = className
        environment "CHEMAXON_HOME", file('cxn_home').getAbsolutePath()
        group 'example'
    }
}

tasks.register('runAllExamples') {
    group 'Run all examples'
    mains.each {
        dependsOn mains.collect { getTaskNameFromClass(it) }
    }
}

def findCxlFiles(File file) {
    def result = []
    if (file.isDirectory()) {
        file.listFiles().each { File f ->
            if (f.isDirectory()) {
                result.addAll(findCxlFiles(f));
            } else if (f.getName().endsWith('.cxl')) {
                result.add(f);
            }
        }
    }
    return result
}

static def getTaskNameFromClass(String className) {
    return "run${className.split('\\.')[-1]}"
}
