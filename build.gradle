/*  Copyright 2018 ChemAxon Ltd.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins {
    id 'java-library'
    id 'eclipse'
}

def version = project.hasProperty('release')?project.getProperty('release'):'+'

dependencies {
    implementation ("com.chemaxon:jchem-main:${version}") {
        exclude group: 'com.oracle.jdbc', module: 'ojdbc8'
    }
	
	// https://mvnrepository.com/artifact/junit/junit
	testCompile group: 'junit', name: 'junit', version: '4.12'
	
	// https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
	
	testCompile 'org.mockito:mockito-core:2.19.0'
	
}

repositories {
    jcenter()
    maven {
        credentials {
            //set this in gradle.properties
            username chemaxonUser
            //set this in gradle.properties
            password chemaxonPassword
        }
        url chemaxonRepository
    }
}

test {
	systemProperty 'CHEMAXON_HOME', file('cxn_home').getAbsolutePath()
}

def mains = [
	'search.DuplicateSearchExample',
	'search.MemorySearchExample',
	'search.StandardizedMolSearchExample',
	'search.db.AsyncSearchExample',
	'search.db.CalculatedColumnsSearchExample',
	'search.db.ChemicalTermsFilteringExample',
	'search.db.DatabaseImportExample',
	'search.db.DiverseSelectionExample',
	'search.db.MultipleQueriesExample',
	'search.db.ReactionSimilaritySearchExample',
	'search.db.RetrievingDatabaseFieldsExample',
	'search.db.SearchTypesExample',
	'search.db.SearchWithFilterQueryExample',
	'search.db.SimilaritySearchExample',
	'search.db.SortedSearchExample',
	'search.hitdisplay.HitColoringExample',
	'search.hitdisplay.PartialCleanExample',
	'search.hitdisplay.RotateDatabaseHitsExample',
	'search.hitdisplay.RotateExample'
]

mains.each { className ->
	task "${getTaskNameFromClass(className)}" (type: JavaExec) {
		classpath=sourceSets.main.runtimeClasspath
		main=className
		environment "CHEMAXON_HOME", file('cxn_home').getAbsolutePath()
		group 'example'
	}
}

task runAllExamples {
	group 'Run all examples'
	mains.each {
		dependsOn getTaskNameFromClass(it)
	}
}

if(findCxlFiles().isEmpty()) {
	throw new GradleException("cxn_home folder has no license, gardle can not run! Please copy license.cxl to cxn_home folder");
}


def findCxlFiles() {
	File cxnHome=file('cxn_home')
	return findCxlFiles(cxnHome)
}

def findCxlFiles(File file) {
	def result = []
	if(file.isDirectory()) {
		file.listFiles().each{ File f ->
			if(f.isDirectory()) {
				result.addAll(findCxlFiles(f));
			} else if(f.getName().endsWith('.cxl')) {
				result.add(f);
			}
		}
	}
	return result
}

def getTaskNameFromClass(String className) {
	return "run${className.split('\\.')[-1]}"
}